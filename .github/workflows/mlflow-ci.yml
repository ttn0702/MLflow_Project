name: MLflow Project CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        pytest -v

  train-model:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check network connectivity
      run: |
        echo "Checking network connectivity..."
        curl -s -o /dev/null -w "HTTP Status Code for github.com: %{http_code}\n" https://github.com
        
    - name: Create dummy file for prefetch
      run: |
        echo "dummy content" > dummy.txt

    # Prefetch the action to avoid download issues
    - name: Prefetch upload-artifact action
      uses: actions/upload-artifact@v4
      with:
        name: dummy
        path: dummy.txt
        retention-days: 1
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Train model
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        python train.py

    - name: Create artifact archive
      run: |
        mkdir -p artifact_bundle
        # Copy model files and scaler
        cp -r models/* artifact_bundle/ || echo "No model files to copy"
        cp data/scaler.joblib artifact_bundle/ || echo "scaler.joblib not found"
        # Ensure artifact directory is not empty
        if [ -z "$(ls -A artifact_bundle)" ]; then
          echo "Creating placeholder file"
          echo "placeholder" > artifact_bundle/placeholder.txt
        fi

    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: artifact_bundle/
        retention-days: 5

  deploy-to-huggingface:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts 
      run: |
        # Copy model files to appropriate directories
        mkdir -p models data
        cp -r downloaded_artifacts/* models/ || echo "No files to copy to models directory"
        if [ -f downloaded_artifacts/scaler.joblib ]; then
          mv downloaded_artifacts/scaler.joblib data/
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install huggingface_hub

    - name: Prepare deployment for Hugging Face
      run: |
        # Create a directory for deployment
        mkdir -p huggingface_app
        
        # Copy app and requirements
        cp -r app/* huggingface_app/ || echo "Error copying app files"
        cp requirements.txt huggingface_app/ || echo "requirements.txt not found, skipping"
        
        # Copy models and data
        mkdir -p huggingface_app/models
        mkdir -p huggingface_app/data
        cp -r models/* huggingface_app/models/ || echo "No model files to copy"
        cp -r data/scaler.joblib huggingface_app/data/ || echo "No scaler.joblib to copy"
        
        # Copy Hugging Face specific files from config directory if they exist
        if [ -d "config/huggingface" ]; then
          echo "Using existing Hugging Face config files"
          cp -r config/huggingface/* huggingface_app/
        else
          echo "Hugging Face config files not found, copying defaults"
          # Copy default config files from .github/hf_templates if they exist
          if [ -d ".github/hf_templates" ]; then
            cp -r .github/hf_templates/* huggingface_app/
          else
            echo "No Hugging Face templates found. Creating minimal configuration."
            # Create minimal Dockerfile
            echo "FROM python:3.10-slim" > huggingface_app/Dockerfile
            echo "WORKDIR /app" >> huggingface_app/Dockerfile
            echo "COPY requirements.txt ." >> huggingface_app/Dockerfile
            echo "RUN pip install --no-cache-dir -r requirements.txt" >> huggingface_app/Dockerfile
            echo "RUN pip install gunicorn" >> huggingface_app/Dockerfile
            echo "COPY . ." >> huggingface_app/Dockerfile
            echo 'CMD ["gunicorn", "--bind", "0.0.0.0:7860", "app:app"]' >> huggingface_app/Dockerfile
            
            # Create minimal .gitattributes for LFS
            echo "*.joblib filter=lfs diff=lfs merge=lfs -text" > huggingface_app/.gitattributes
            echo "*.pkl filter=lfs diff=lfs merge=lfs -text" >> huggingface_app/.gitattributes
          fi
        fi

    - name: Deploy to Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        # Install Hugging Face CLI
        pip install huggingface_hub
        
        # Configure Git for Hugging Face
        git config --global user.email "${{ secrets.EMAIL_HUGGINGFACE }}"
        git config --global user.name "${{ secrets.USERNAME_HUGGINGFACE }}"
        
        # Login to Hugging Face using CLI
        echo "Logging in to Hugging Face..."
        huggingface-cli login --token $HF_TOKEN
        
        # Check if the HF_USERNAME is set
        if [ -z "$HF_USERNAME" ]; then
          echo "Error: HF_USERNAME is not set in repository secrets!"
          exit 1
        fi
        
        # Check if Space already exists
        echo "Checking if Space already exists..."
        SPACE_EXISTS=$(huggingface-cli repo list --spaces --output json | grep -c "\"$HF_USERNAME/mlflow-project-app\"" || echo "0")
        
        # Initialize Git repository in the huggingface_app directory
        cd huggingface_app
        git init
        
        # Create initial branch with correct name
        git checkout -b main
        
        # Add files and commit
        git add .
        git commit -m "Deploy MLflow Project to Hugging Face Spaces"
        
        # Create or update Hugging Face Space
        if [ "$SPACE_EXISTS" -eq "0" ]; then
          echo "Creating new Hugging Face Space: $HF_USERNAME/mlflow-project-app"
          huggingface-cli repo create mlflow-project-app --type space --space-sdk gradio
        else
          echo "Space already exists, will update it: $HF_USERNAME/mlflow-project-app"
        fi
        
        # Setup remote and push
        echo "Setting up Git remote and pushing to Hugging Face..."
        if git remote | grep -q "^origin$"; then
          git remote set-url origin "https://huggingface.co/spaces/$HF_USERNAME/mlflow-project-app"
        else
          git remote add origin "https://huggingface.co/spaces/$HF_USERNAME/mlflow-project-app"
        fi
        
        # Push with token authentication - make sure we're on main branch
        echo "Pushing to Hugging Face Space..."
        git push -f "https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/mlflow-project-app" main
