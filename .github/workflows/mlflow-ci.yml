name: MLflow Project CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        pytest -v

  train-model:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check network connectivity
      run: |
        echo "Checking network connectivity..."
        curl -s -o /dev/null -w "HTTP Status Code for github.com: %{http_code}\n" https://github.com
        
    - name: Create dummy file for prefetch
      run: |
        echo "dummy content" > dummy.txt

    # Prefetch the action to avoid download issues
    - name: Prefetch upload-artifact action
      uses: actions/upload-artifact@v4
      with:
        name: dummy
        path: dummy.txt
        retention-days: 1
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Train model
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        python train.py

    - name: Create artifact archive
      run: |
        mkdir -p artifact_bundle
        # Copy model files and scaler
        cp -r models/* artifact_bundle/ || echo "No model files to copy"
        cp data/scaler.joblib artifact_bundle/ || echo "scaler.joblib not found"
        # Ensure artifact directory is not empty
        if [ -z "$(ls -A artifact_bundle)" ]; then
          echo "Creating placeholder file"
          echo "placeholder" > artifact_bundle/placeholder.txt
        fi

    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: artifact_bundle/
        retention-days: 5

  deploy-to-huggingface:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts 
      run: |
        # Setup directories and copy artifacts
        mkdir -p models data
        
        # Check if downloaded_artifacts directory is not empty
        if [ "$(ls -A downloaded_artifacts 2>/dev/null)" ]; then
          cp -r downloaded_artifacts/* models/ || echo "No files to copy to models directory"
          if [ -f downloaded_artifacts/scaler.joblib ]; then
            mv downloaded_artifacts/scaler.joblib data/
          fi
        else
          echo "Warning: downloaded_artifacts directory is empty or does not exist"
        fi
        
        # Show directories for debugging
        echo "Models directory contents:"
        ls -la models/ || echo "Models directory is empty"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install huggingface_hub

    - name: Prepare deployment for Hugging Face
      run: |
        # Create deployment directory
        mkdir -p huggingface_app
        
        # Copy app and requirements
        cp -r app/* huggingface_app/ || echo "Error copying app files"
        cp requirements.txt huggingface_app/ || echo "requirements.txt not found"
        
        # Copy README from templates
        if [ -f .github/hf_templates/app_README.md ]; then
          cp .github/hf_templates/app_README.md huggingface_app/README.md
        fi
        
        # Copy Dockerfile
        if [ -f .github/hf_templates/app_Dockerfile ]; then
          cp .github/hf_templates/app_Dockerfile huggingface_app/Dockerfile
        fi
        
        # Copy .gitattributes if exists
        if [ -f .github/hf_templates/.gitattributes ]; then
          cp .github/hf_templates/.gitattributes huggingface_app/
        fi
        
        # Copy documentation if available
        if [ -f ProjectDescription.md ]; then
          cp ProjectDescription.md huggingface_app/
        elif [ -f app/ProjectDescription.md ]; then
          cp app/ProjectDescription.md huggingface_app/
        fi
        
        # Handle model files
        mkdir -p huggingface_app/models huggingface_app/data
        chmod -R 755 huggingface_app/models huggingface_app/data
        
        if [ -f models/model.joblib ]; then
          cp models/model.joblib huggingface_app/models/best_model.joblib
        elif [ -f models/best_model.pkl ]; then
          cp models/best_model.pkl huggingface_app/models/best_model.joblib
        else
          cp -r models/* huggingface_app/models/ || echo "No model files found"
          # Create placeholder if needed
          [ -z "$(ls -A huggingface_app/models)" ] && echo "Placeholder model" > huggingface_app/models/best_model.joblib
        fi
        
        # Copy scaler
        cp data/scaler.joblib huggingface_app/data/ || echo "No scaler.joblib to copy"
        
        # Replace username placeholder in README
        [ -f huggingface_app/README.md ] && sed -i "s/{username}/$HF_USERNAME/g" huggingface_app/README.md

    - name: Deploy to Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        # Setup tools and environment
        pip install huggingface_hub
        sudo apt-get update && sudo apt-get install -y git-lfs
        git config --global user.email "${{ secrets.EMAIL_HUGGINGFACE }}"
        git config --global user.name "${{ secrets.USERNAME_HUGGINGFACE }}"
        
        # Login and validate
        huggingface-cli login --token $HF_TOKEN
        [ -z "$HF_USERNAME" ] && echo "Error: HF_USERNAME not set in secrets" && exit 1
        
        # Try creating the space silently first, ignore errors if it already exists
        echo "Creating or checking Hugging Face Space..."
        huggingface-cli repo create "spaces/$HF_USERNAME/mlflow-project-app" --type space || echo "Space might already exist"
        
        # Setup Git repository and LFS
        cd huggingface_app
        git init
        git lfs install
        git lfs track "*.joblib" "*.pkl" "*.h5" "*.onnx" "*.bin"
        git add .gitattributes
        git checkout -b main
        git add .
        git commit -m "Deploy MLflow Project to Hugging Face Spaces"
        
        # Setup remote and push
        git remote add origin "https://huggingface.co/spaces/$HF_USERNAME/mlflow-project-app"
        git push -f "https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/mlflow-project-app" main

  deploy-mlflow-ui:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts and mlruns
      run: |
        # Setup directories and copy artifacts
        mkdir -p models data mlruns
        
        # Check if downloaded_artifacts directory is not empty
        if [ "$(ls -A downloaded_artifacts 2>/dev/null)" ]; then
          cp -r downloaded_artifacts/* models/ || echo "No files to copy to models directory"
          if [ -f downloaded_artifacts/scaler.joblib ]; then
            mv downloaded_artifacts/scaler.joblib data/
          fi
        else
          echo "Warning: downloaded_artifacts directory is empty or does not exist"
        fi
        
        # Create minimal mlruns structure if it doesn't exist
        if [ ! -d "mlruns" ] || [ -z "$(ls -A mlruns)" ]; then
          mkdir -p mlruns/0
          echo '{"experiment_id": "0", "name": "Default", "artifact_location": "mlruns/0", "lifecycle_stage": "active"}' > mlruns/0/meta.yaml
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install huggingface_hub mlflow

    - name: Prepare MLflow UI deployment
      run: |
        # Create deployment directory
        mkdir -p mlflow_ui_app
        
        # Copy template files
        cp .github/hf_templates/app.py mlflow_ui_app/
        [ -f .github/hf_templates/mlflow_ui_Dockerfile ] && cp .github/hf_templates/mlflow_ui_Dockerfile mlflow_ui_app/Dockerfile
        [ -f .github/hf_templates/mlflow_ui_README.md ] && cp .github/hf_templates/mlflow_ui_README.md mlflow_ui_app/README.md
        cp .github/hf_templates/.gitattributes mlflow_ui_app/
        
        # Copy requirements and ensure MLflow is included
        cp requirements.txt mlflow_ui_app/
        grep -q "mlflow" mlflow_ui_app/requirements.txt || echo "mlflow==2.8.1" >> mlflow_ui_app/requirements.txt
        
        # Create clean mlruns directory structure for MLflow UI
        echo "Creating clean mlruns structure"
        mkdir -p mlflow_ui_app/mlruns
        
        # Debug: List all directories in mlruns
        echo "Available experiment directories:"
        ls -la mlruns/
        
        # If we have mlruns data, copy important experiment data 
        if [ -d "mlruns" ] && [ "$(ls -A mlruns)" ]; then
          echo "Copying experiment data from mlruns directory"
          
          # Copy experiment folders but exclude the .trash directory
          for dir in mlruns/*/; do
            if [[ "$dir" != "mlruns/.trash/" && -d "$dir" ]]; then
              exp_name=$(basename "$dir")
              echo "Copying experiment: $dir (ID: $exp_name)"
              mkdir -p "mlflow_ui_app/mlruns/$exp_name"
              
              # Copy metadata files
              if [ -f "$dir/meta.yaml" ]; then
                cp "$dir/meta.yaml" "mlflow_ui_app/mlruns/$exp_name/"
                echo "  Copied meta.yaml"
              else
                echo "  No meta.yaml found in $dir"
              fi
              
              # Copy run folders
              for run in "$dir"/*/; do
                if [ -d "$run" ]; then
                  run_id=$(basename "$run")
                  echo "  Copying run: $run_id"
                  mkdir -p "mlflow_ui_app/mlruns/$exp_name/$run_id"
                  cp -r "$run"/* "mlflow_ui_app/mlruns/$exp_name/$run_id/" || echo "    Warning: Some files could not be copied from $run"
                fi
              done
            fi
          done
          
          # Ensure the classification experiment is included if it exists
          if [ -d "mlruns/160353641281916972" ]; then
            echo "Ensuring classification experiment is copied"
            exp_id="160353641281916972"
            mkdir -p "mlflow_ui_app/mlruns/$exp_id"
            
            # Copy meta.yaml
            if [ -f "mlruns/$exp_id/meta.yaml" ]; then
              cp "mlruns/$exp_id/meta.yaml" "mlflow_ui_app/mlruns/$exp_id/"
            fi
            
            # Copy all runs
            for run in mlruns/$exp_id/*/; do
              if [ -d "$run" ]; then
                run_id=$(basename "$run")
                echo "  Explicitly copying classification run: $run_id"
                mkdir -p "mlflow_ui_app/mlruns/$exp_id/$run_id"
                cp -r "$run"/* "mlflow_ui_app/mlruns/$exp_id/$run_id/" || echo "    Warning: Files could not be copied"
              fi
            done
          fi
          
          # Copy models directory if it exists
          if [ -d "mlruns/models" ]; then
            echo "Copying registered models directory"
            mkdir -p "mlflow_ui_app/mlruns/models"
            cp -r mlruns/models/* mlflow_ui_app/mlruns/models/ || echo "Warning: Could not copy some model files"
            
            # Debug: list copied models
            echo "Copied models:"
            ls -la mlflow_ui_app/mlruns/models/
          fi
        else
          echo "No existing mlruns data found, creating minimal structure"
          mkdir -p mlflow_ui_app/mlruns/0
          echo '{"experiment_id": "0", "name": "Default", "artifact_location": "mlruns/0", "lifecycle_stage": "active"}' > mlflow_ui_app/mlruns/0/meta.yaml
        fi
        
        # Debug: List copied experiments
        echo "Copied experiments:"
        ls -la mlflow_ui_app/mlruns/
        
        # Create empty .trash directory to prevent permission issues
        mkdir -p mlflow_ui_app/mlruns/.trash
        touch mlflow_ui_app/mlruns/.trash/.gitkeep
        
        # Replace username placeholders in README
        [ -f mlflow_ui_app/README.md ] && sed -i "s/{username}/$HF_USERNAME/g" mlflow_ui_app/README.md

    - name: Deploy MLflow UI to Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        # Install and configure tools
        pip install huggingface_hub
        sudo apt-get update && sudo apt-get install -y git-lfs
        git config --global user.email "${{ secrets.EMAIL_HUGGINGFACE }}"
        git config --global user.name "${{ secrets.USERNAME_HUGGINGFACE }}"
        
        # Login to Hugging Face
        huggingface-cli login --token $HF_TOKEN
        [ -z "$HF_USERNAME" ] && echo "Error: HF_USERNAME not set in secrets" && exit 1
        
        # Try creating the space silently first, ignore errors if it already exists
        echo "Creating or checking Hugging Face Space for MLflow UI..."
        huggingface-cli repo create "spaces/$HF_USERNAME/mlflow-project-ui" --type space || echo "Space might already exist"
        
        # Setup and push Git repository
        cd mlflow_ui_app
        git init
        git lfs install
        git add .gitattributes
        git checkout -b main
        git add .
        git commit -m "Deploy MLflow UI"
        git push -f "https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/mlflow-project-ui" main
