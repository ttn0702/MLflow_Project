name: MLflow Project CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        pytest -v

  train-model:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check network connectivity
      run: |
        echo "Checking network connectivity..."
        curl -s -o /dev/null -w "HTTP Status Code for github.com: %{http_code}\n" https://github.com
        
    - name: Create dummy file for prefetch
      run: |
        echo "dummy content" > dummy.txt

    # Prefetch the action to avoid download issues
    - name: Prefetch upload-artifact action
      uses: actions/upload-artifact@v4
      with:
        name: dummy
        path: dummy.txt
        retention-days: 1
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Train model
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        python train.py

    - name: Create artifact archive
      run: |
        mkdir -p artifact_bundle
        # Copy model files and scaler
        cp -r models/* artifact_bundle/ || echo "No model files to copy"
        cp data/scaler.joblib artifact_bundle/ || echo "scaler.joblib not found"
        # Ensure artifact directory is not empty
        if [ -z "$(ls -A artifact_bundle)" ]; then
          echo "Creating placeholder file"
          echo "placeholder" > artifact_bundle/placeholder.txt
        fi

    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: artifact_bundle/
        retention-days: 5

  deploy-to-huggingface:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts 
      run: |
        # Setup directories and copy artifacts
        mkdir -p models data
        cp -r downloaded_artifacts/* models/ || echo "No files to copy to models directory"
        [ -f downloaded_artifacts/scaler.joblib ] && mv downloaded_artifacts/scaler.joblib data/
        
        # Show directories for debugging
        echo "Models directory contents:"
        ls -la models/

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install huggingface_hub

    - name: Prepare deployment for Hugging Face
      run: |
        # Create deployment directory
        mkdir -p huggingface_app
        
        # Copy app and requirements
        cp -r app/* huggingface_app/ || echo "Error copying app files"
        cp requirements.txt huggingface_app/ || echo "requirements.txt not found"
        
        # Copy README from templates
        if [ -f .github/hf_templates/app_README.md ]; then
          cp .github/hf_templates/app_README.md huggingface_app/README.md
        fi
        
        # Copy Dockerfile
        if [ -f .github/hf_templates/app_Dockerfile ]; then
          cp .github/hf_templates/app_Dockerfile huggingface_app/Dockerfile
        fi
        
        # Copy .gitattributes if exists
        if [ -f .github/hf_templates/.gitattributes ]; then
          cp .github/hf_templates/.gitattributes huggingface_app/
        fi
        
        # Copy documentation if available
        if [ -f ProjectDescription.md ]; then
          cp ProjectDescription.md huggingface_app/
        elif [ -f app/ProjectDescription.md ]; then
          cp app/ProjectDescription.md huggingface_app/
        fi
        
        # Handle model files
        mkdir -p huggingface_app/models huggingface_app/data
        chmod -R 755 huggingface_app/models huggingface_app/data
        
        if [ -f models/model.joblib ]; then
          cp models/model.joblib huggingface_app/models/best_model.joblib
        elif [ -f models/best_model.pkl ]; then
          cp models/best_model.pkl huggingface_app/models/best_model.joblib
        else
          cp -r models/* huggingface_app/models/ || echo "No model files found"
          # Create placeholder if needed
          [ -z "$(ls -A huggingface_app/models)" ] && echo "Placeholder model" > huggingface_app/models/best_model.joblib
        fi
        
        # Copy scaler
        cp data/scaler.joblib huggingface_app/data/ || echo "No scaler.joblib to copy"
        
        # Replace username placeholder in README
        [ -f huggingface_app/README.md ] && sed -i "s/{username}/$HF_USERNAME/g" huggingface_app/README.md

    - name: Deploy to Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        # Setup tools and environment
        pip install huggingface_hub
        apt-get update && apt-get install -y git-lfs
        git config --global user.email "${{ secrets.EMAIL_HUGGINGFACE }}"
        git config --global user.name "${{ secrets.USERNAME_HUGGINGFACE }}"
        
        # Login and validate
        huggingface-cli login --token $HF_TOKEN
        [ -z "$HF_USERNAME" ] && echo "Error: HF_USERNAME not set in secrets" && exit 1
        
        # Create Space if needed
        huggingface-cli repo list --spaces --output json | grep -q "\"$HF_USERNAME/mlflow-project-app\"" || \
          huggingface-cli repo create mlflow-project-app --type space --space-sdk docker
        
        # Setup Git repository and LFS
        cd huggingface_app
        git init
        git lfs install
        git lfs track "*.joblib" "*.pkl" "*.h5" "*.onnx" "*.bin"
        git add .gitattributes
        git checkout -b main
        git add .
        git commit -m "Deploy MLflow Project to Hugging Face Spaces"
        
        # Setup remote and push
        git remote add origin "https://huggingface.co/spaces/$HF_USERNAME/mlflow-project-app"
        git push -f "https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/mlflow-project-app" main

  deploy-mlflow-ui:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts and mlruns
      run: |
        # Setup directories and copy artifacts
        mkdir -p models data mlruns
        cp -r downloaded_artifacts/* models/ || echo "No files to copy to models directory"
        [ -f downloaded_artifacts/scaler.joblib ] && mv downloaded_artifacts/scaler.joblib data/
        
        # Create minimal mlruns structure if it doesn't exist
        [ ! -d "mlruns" ] && mkdir -p mlruns/0 && echo '{"experiment_id": "0", "name": "Default", "artifact_location": "mlruns/0", "lifecycle_stage": "active"}' > mlruns/0/meta.yaml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install huggingface_hub mlflow

    - name: Prepare MLflow UI deployment
      run: |
        # Create deployment directory
        mkdir -p mlflow_ui_app
        
        # Copy template files
        cp .github/hf_templates/app.py mlflow_ui_app/
        [ -f .github/hf_templates/mlflow_ui_Dockerfile ] && cp .github/hf_templates/mlflow_ui_Dockerfile mlflow_ui_app/Dockerfile
        [ -f .github/hf_templates/mlflow_ui_README.md ] && cp .github/hf_templates/mlflow_ui_README.md mlflow_ui_app/README.md
        cp .github/hf_templates/.gitattributes mlflow_ui_app/
        
        # Copy or prepare requirements
        if [ -f .github/hf_templates/mlflow_ui_requirements.txt ]; then
          cp .github/hf_templates/mlflow_ui_requirements.txt mlflow_ui_app/requirements.txt
        elif [ -f requirements.txt ]; then
          cp requirements.txt mlflow_ui_app/
          # Ensure MLflow is in requirements
          grep -q "mlflow" mlflow_ui_app/requirements.txt || echo "mlflow==2.8.1" >> mlflow_ui_app/requirements.txt
        else
          # Create minimal requirements
          echo "mlflow==2.8.1" > mlflow_ui_app/requirements.txt
          echo "scikit-learn>=1.0.0" >> mlflow_ui_app/requirements.txt
          echo "pandas>=1.3.0" >> mlflow_ui_app/requirements.txt
          echo "numpy>=1.20.0" >> mlflow_ui_app/requirements.txt
        fi
        
        # Copy mlruns data
        cp -r mlruns mlflow_ui_app/
        
        # Replace username placeholders in README
        [ -f mlflow_ui_app/README.md ] && sed -i "s/{username}/$HF_USERNAME/g" mlflow_ui_app/README.md

    - name: Deploy MLflow UI to Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        # Install and configure tools
        pip install huggingface_hub
        apt-get update && apt-get install -y git-lfs
        git config --global user.email "${{ secrets.EMAIL_HUGGINGFACE }}"
        git config --global user.name "${{ secrets.USERNAME_HUGGINGFACE }}"
        
        # Login to Hugging Face
        huggingface-cli login --token $HF_TOKEN
        [ -z "$HF_USERNAME" ] && echo "Error: HF_USERNAME not set in secrets" && exit 1
        
        # Create Space if needed
        huggingface-cli repo list --spaces --output json | grep -q "\"$HF_USERNAME/mlflow-project-ui\"" || \
          huggingface-cli repo create mlflow-project-ui --type space --space-sdk docker
        
        # Setup and push Git repository
        cd mlflow_ui_app
        git init
        git lfs install
        git add .gitattributes
        git checkout -b main
        git add .
        git commit -m "Deploy MLflow UI"
        git push -f "https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/mlflow-project-ui" main
