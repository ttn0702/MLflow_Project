name: MLflow Project CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        pytest -v

  train-model:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check network connectivity
      run: |
        echo "Checking network connectivity..."
        curl -s -o /dev/null -w "HTTP Status Code for github.com: %{http_code}\n" https://github.com
        
    - name: Create dummy file for prefetch
      run: |
        echo "dummy content" > dummy.txt

    # Prefetch the action to avoid download issues
    - name: Prefetch upload-artifact action
      uses: actions/upload-artifact@v4
      with:
        name: dummy
        path: dummy.txt
        retention-days: 1
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Train model
      run: |
        # Create directories if they don't exist
        mkdir -p data models
        python train.py

    - name: Create artifact archive
      run: |
        mkdir -p artifact_bundle
        # Copy model files and scaler
        cp -r models/* artifact_bundle/ || echo "No model files to copy"
        cp data/scaler.joblib artifact_bundle/ || echo "scaler.joblib not found"
        # Ensure artifact directory is not empty
        if [ -z "$(ls -A artifact_bundle)" ]; then
          echo "Creating placeholder file"
          echo "placeholder" > artifact_bundle/placeholder.txt
        fi

    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: artifact_bundle/
        retention-days: 5

  deploy-web-app:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    # Cấp quyền ghi cho job
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts 
      run: |
        # Maintain the original project structure for models and data
        mkdir -p models data
        cp -r downloaded_artifacts/* models/ || echo "No files to copy to models directory"
        if [ -f downloaded_artifacts/scaler.joblib ]; then
          mv downloaded_artifacts/scaler.joblib data/
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Prepare web app for GitHub Pages
      run: |
        # Create a directory for web deployment
        mkdir -p deploy_app
        
        # Copy app and requirements
        cp -r app/* deploy_app/ || echo "Error copying app files"
        cp requirements.txt deploy_app/ || echo "requirements.txt not found, skipping"
        
        # Copy models and data
        mkdir -p deploy_app/models
        mkdir -p deploy_app/data
        cp -r models/* deploy_app/models/ || echo "No model files to copy"
        cp -r data/scaler.joblib deploy_app/data/ || echo "No scaler.joblib to copy"
        
        # Ensure there's an index.html file at the root
        if [ ! -f "deploy_app/index.html" ]; then
          if [ -f "deploy_app/templates/index.html" ]; then
            cp deploy_app/templates/index.html deploy_app/
          else
            # Create a simple index.html
            cat > deploy_app/index.html << EOF
<!DOCTYPE html>
<html>
<head>
    <title>MLflow Project</title>
    <meta http-equiv="refresh" content="0; URL='app/templates/index.html'" />
</head>
<body>
    <p>If you are not redirected, <a href="app/templates/index.html">click here</a>.</p>
</body>
</html>
EOF
          fi
        fi
        
        # Create a .nojekyll file to disable Jekyll processing
        touch deploy_app/.nojekyll
        
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: deploy_app
        branch: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
