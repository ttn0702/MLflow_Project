name: MLflow Project CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        mkdir -p data models
        pytest -v

  train-model:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Preload artifact upload action
      uses: actions/upload-artifact@v3.1.2
      with:
        name: preload
        path: dummy
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Train model
      run: |
        mkdir -p data models
        python train.py
        echo "Files in models directory:"
        ls -la models/
        echo "Files in data directory:"
        ls -la data/

    - name: Create artifact archive
      run: |
        mkdir -p artifact_bundle
        cp -rv models/* artifact_bundle/ || echo "No model files to copy or models directory is empty"
        cp -v data/scaler.joblib artifact_bundle/ || echo "scaler.joblib not found"
        if [ -z "$(ls -A artifact_bundle)" ]; then
          echo "Creating placeholder file"
          echo "placeholder" > artifact_bundle/placeholder.txt
        fi
        echo "Contents of artifact_bundle directory:"
        ls -la artifact_bundle/

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3.1.2
      with:
        name: model-artifacts
        path: artifact_bundle/

  deploy-web-app:
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: model-artifacts
        path: downloaded_artifacts

    - name: Setup artifacts
      run: |
        mkdir -p models
        mkdir -p data
        echo "Contents of downloaded_artifacts:"
        ls -la downloaded_artifacts/
        cp -rv downloaded_artifacts/* models/ || echo "No files to copy to models directory"
        if [ -f downloaded_artifacts/scaler.joblib ]; then
          mv -v downloaded_artifacts/scaler.joblib data/
        else
          echo "scaler.joblib not found in downloaded artifacts"
        fi
        echo "Final contents of models directory:"
        ls -la models/
        echo "Final contents of data directory:"
        ls -la data/

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Example deployment step
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.14
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: ${{ secrets.HEROKU_EMAIL }}
